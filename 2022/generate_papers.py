import re


def escape_characters(string):
    """
    Converts all special characters in the given string to plain ASCII using
    standard html substitutions.
    """
    return string.encode("ascii", "xmlcharrefreplace").decode("ascii")


class Session:
    """A session with meta-data and paper list."""

    def __init__(self, index, text):
        """Parses session meta-data from the given text."""
        self.index = index
        match = re.match(r"#\s+(.+)\nchair:(.*)", text)
        if match is None:
            print("Session misformatted:")
            print(text)
            return
        self.name = match.group(1)
        self.chair = match.group(2)
        self.papers = list()

    def add_paper(self, paper):
        self.papers.append(paper)

    def get_html(self):
        """:return: HTML code for this whole session on the papers page."""
        text = self.name
        if len(self.chair):
            text += "(chair %s)" % self.chair
        html = "<h3><a name=\"Papers%d\">Papers %d: %s</a></h3>\n<dl>\n" % (self.index, self.index, escape_characters(text))
        for paper in self.papers:
            html += paper.get_html()
        html += "</dl><br/><hr/>\n\n"
        return html


class Paper:
    """A paper with author list, abstract, links, etc."""

    def __init__(self, text):
        """Parses paper data from the given text."""
        #                       1      2      3           4               5            6      7
        match = re.match(r"##\s+(.+?)\n(\w+)\n(.+?)\nlink:(.*?)\npreprint:(.*?)\nthumb:(.*?)\n(.*)", text, re.DOTALL)
        if match is None:
            print("Paper misformatted:")
            print(text)
            return
        self.title = match.group(1)
        self.type = match.group(2)
        self.authors = match.group(3).split(", ")
        self.link = match.group(4)
        self.preprint = match.group(5)
        self.thumb = match.group(6)
        self.abstract = match.group(7)

    def get_html(self):
        """:return: HTML code for the papers page."""
        # Main meta data
        if len(self.authors) > 1:
            author_list = ", ".join(self.authors[:-1]) + " and " + self.authors[-1]
        else:
            author_list = self.authors[0]
        html = "<dt><b>%s</b></dt>\n" % escape_characters(self.title)
        html += "        <dd>%s</dd>\n" % escape_characters(author_list)
        # Paper type and links
        type = dict(i3d="", jcgt="(JCGT paper presentation)", tvcg="(TVCG paper presentation)")[self.type]
        links = list()
        for name, url in [("link", self.link), ("preprint", self.preprint)]:
            if len(url):
                links.append(" <a href=\"%s\">%s</a>" % (url, name))
        links = ",".join(links)
        if len(type + links):
            html += "        <dd>%s</dd>\n" % (type + links)
        # Abstract and thumbnail in a detail environment
        html += "        <dd><details><summary>Abstract</summary>\n"
        for line in self.abstract.split("\n"):
            html += "        <p>%s</p>\n" % escape_characters(line)
        if len(self.thumb):
            html += "        <p><img src=\"img/paper_thumbnails/%s\" width=\"400\"></p>\n" % self.thumb
        html += "        </details></dd>"
        html += "\n"
        return html


def parse_sessions(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        text = file.read()
    sessions = list()
    session = None
    for match in re.finditer(r"((^#\s+.*?)|(^##\s+.*?))\n\n", text, re.MULTILINE | re.DOTALL):
        if match.group(2) is not None:
            session = Session(len(sessions) + 1, match.group(1))
            sessions.append(session)
        else:
            session.add_paper(Paper(match.group(1)))
    return sessions


if __name__ == "__main__":
    sessions = parse_sessions("papers.txt")
    session_html = ""
    for session in sessions:
        session_html += session.get_html()
    # Splice it into papers.html
    with open("papers.html", "r", encoding="utf-8") as file:
        html = file.read()
    begin_tag = "<!-- BEGIN AUTOGENERATED -->\n"
    begin = html.find(begin_tag) + len(begin_tag)
    end = html.find("<!-- END AUTOGENERATED -->")
    html = html[:begin] + session_html + html[end:]
    with open("papers.html", "w", encoding="utf-8") as file:
        file.write(html)
